@page "/application/{appId}/configurations"
@using BCI.Extensions.DDD.ApplicationService;
@using BCI.Extensions.Core.Json;
@using AirCC.Portal.AppService.ApplicationDtos;
@using BCI.Extensions.Mvc.HttpClientJson
@using AirCC.PortalUI.Shared.Table

@inject HttpClient Http
@inject IJsonSerializer json
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime


@if (result?.DataList == null)
{
    <p><em>Loading applications...</em></p>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.Is12.OnMobile">
            <Inline>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                </Field>
                <Field Margin="Margin.Is3.OnX.OnTablet">
                    <TextEdit Role="TextRole.Text" @bind-text="@Key" Placeholder="Key" />
                </Field>
                <Field>
                    <Button Color="Color.Primary" @onclick=@Search>Search</Button>
                </Field>
                <Field Margin="Margin.Is3.OnX.OnTablet" Float="Float.Right">
                    <Button Color="Color.Primary" @onclick="@(() => NavManager.NavigateTo($"/application/{appId}/AddConfiguration"))">Add Configuration</Button>
                </Field>
            </Inline>
        </Column>
    </Row>
    <br />
    <TableTemplate TableTitle="Configurations" Items="result.DataList" TItem="ConfigurationListOutput"
                   TotalCount=result.TotalCount TotalPages=result.TotalPages PageSize=" 10"
                   PageIndex=@result.CurrentIndex OnPaginationItemClick="@OnPageItemClicked">
        <TableHeaderContent>
            <TableHeaderCell>Key</TableHeaderCell>
            <TableHeaderCell>Value</TableHeaderCell>
            <TableHeaderCell>Operations</TableHeaderCell>
        </TableHeaderContent>
        <RowTemplate>
            <TableRowCell>@context.CfgKey</TableRowCell>
            <TableRowCell>@context.CfgValue</TableRowCell>
            <TableRowCell>
                @{
                    if (context.Status == Portal.Domain.CfgStatus.Offline)
                    {
                        <Button Color="Color.Info" Size="Size.ExtraSmall"
                                @onclick="@(() => NavManager.NavigateTo($"/{appId}/online/{context.Id}"))">
                            Online
                            <Icon Name="IconName.ArrowUp"></Icon>
                        </Button>
                    }
                    else
                    {
                        <Button Color="Color.Warning" Size="Size.ExtraSmall"
                                @onclick="@(() => NavManager.NavigateTo($"/{appId}/offline/{context.Id}"))">
                            Offline
                            <Icon Name="IconName.ArrowDown"></Icon>
                        </Button>
                    }
                }

                <Button Color="Color.Success" Size="Size.ExtraSmall"
                        @onclick="@(() => NavManager.NavigateTo($"/application/{appId}/UpdateConfiguration/{context.Id}"))">
                    Edit
                    <Icon Name="IconName.Edit"></Icon>
                </Button>
                <Button Color="Color.Danger" Size="Size.ExtraSmall"
                        @onclick="@(() => Delete(context.Id))">
                    Delete<Icon Name="IconName.Delete"></Icon>
                </Button>
            </TableRowCell>

        </RowTemplate>
    </TableTemplate>
}

@code {
    [Parameter]
    public string appId { get; set; }

    private PagedResultDto<ConfigurationListOutput> result;
    public string Key { get; set; }

    protected override async Task OnInitializedAsync()
    {
        result = await Query();
    }

    private async Task Search()
    {
        result = await Query(Key);
    }

    private async Task OnPageItemClicked(int pageIndex)
    {
        result = await Query(Key, pageIndex);
    }

    private async Task Delete(string id)
    {
        var confirmDelete = await JsRuntime.InvokeAsync<bool>("confirm", "Do you want to delete it?");
        if (confirmDelete)
        {
            await Http.DeleteAsync($"api/app/{id}");
            result = await Query();
        }
    }

    private async Task<PagedResultDto<ConfigurationListOutput>> Query(string key = "", int pageIndex = 1)
    {
        return await Http.GetFromNewtonJsonAsync<PagedResultDto<ConfigurationListOutput>>($"api/app/{appId}/GetConfigurations?key={key}&pageIndex={pageIndex}");
    }

}
